{"version":3,"sources":["components/GameImage.js","App.js","serviceWorker.js","index.js"],"names":["currentScore","highScore","localStorage","getItem","GameImage","state","isClicked","handleClick","console","log","_this","setState","setItem","window","location","reload","resetGame","react_default","a","createElement","onClick","this","src","props","image","alt","name","style","width","height","React","Component","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clickEvent","bind","assertThisInitialized","resetScore","images","event","preventDefault","newOrder","i","length","j","Math","floor","random","temp","className","fontSize","Container","Row","map","item","key","id","Col","sm","components_GameImage","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f288aaa8.chunk.js","sourcesContent":["import React from \"react\";\n//import images from \"./images.json\";\nvar currentScore = 0;\nvar highScore = localStorage.getItem(\"highScore\");\nclass GameImage extends React.Component {\n  state = { isClicked: false };\n  handleClick = () => {\n    console.log(this.state.isClicked);\n    if (this.state.isClicked === false) {\n      this.setState({ isClicked: true });\n      currentScore++;\n    } else {\n      console.log(\"Game Over\");\n      if (currentScore > highScore) {\n        highScore = currentScore;\n      }\n      currentScore = 0;\n      localStorage.setItem(\"highScore\", highScore);\n      window.location.reload();\n    }\n  };\n\n  resetGame = () => {\n    localStorage.setItem(\"highScore\", 0);\n    localStorage.getItem(\"highScore\");\n  };\n\n  render() {\n    return (\n      <div onClick={this.handleClick}>\n        <img\n          src={this.props.image}\n          alt={this.props.name}\n          style={{ width: \"150px\", height: \"150px\" }}\n        />\n        <p>{/*!this.state.isClicked ? \"false\" : \"true\"*/}</p>\n      </div>\n    );\n  }\n}\n\nexport default GameImage;\nexport { currentScore };\nexport { highScore };\n","import React, { Component } from \"react\";\n//import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport images from \"./images.json\";\nimport GameImage from \"./components/GameImage\";\nimport { Container, Row, Col } from \"react-bootstrap\";\nimport { currentScore } from \"./components/GameImage\";\nimport { highScore } from \"./components/GameImage\";\n\nlocalStorage.getItem(\"highScore\");\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.clickEvent = this.clickEvent.bind(this);\n    this.resetScore = this.resetScore.bind(this);\n    this.state = { images, isClicked: null };\n  }\n\n  clickEvent(event) {\n    //Ramdomly orders the Pokemon\n    event.preventDefault();\n    var newOrder = this.state.images;\n    for (var i = 0; i < newOrder.length - 1; i++) {\n      var j = i + Math.floor(Math.random() * (newOrder.length - i));\n      var temp = newOrder[j];\n      newOrder[j] = newOrder[i];\n      newOrder[i] = temp;\n    }\n    console.log(\"clicked\");\n    console.log(this.state.images);\n\n    this.setState({ images: newOrder });\n\n    if (currentScore === 0) {\n      this.setState({ isClicked: false });\n    }\n  }\n\n  resetScore(event) {\n    event.preventDefault();\n    localStorage.setItem(\"highScore\", 0);\n    localStorage.getItem(\"highScore\");\n    window.location.reload();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p style={{ fontSize: \"60px\" }}>\n            <b>Arceus Clicky Game</b>\n          </p>\n          <p>Don't click on the same image more than once!</p>\n          <p>Current Score: {currentScore}</p>\n          <p>High Score: {localStorage.getItem(\"highScore\")}</p>\n          <div className=\"images-group\" onClick={this.clickEvent}>\n            <Container>\n              <Row>\n                {images.map(item => (\n                  <div key={item.id}>\n                    <Col sm={2}>\n                      <GameImage image={item.image} name={item.name} />\n                    </Col>\n                  </div>\n                ))}\n              </Row>\n            </Container>\n          </div>\n          <button onClick={this.resetScore}>Reset High Score</button>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//https://stackoverflow.com/questions/3718282/javascript-shuffling-objects-inside-an-object-randomize\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}